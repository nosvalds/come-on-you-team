{"version":3,"sources":["img/loader-large.png","components/Header/Header.js","components/Nav/Nav.js","components/Footer/Footer.js","components/FourOhFour/FourOhFour.js","components/Instructions/Instructions.js","components/Instructions/index.js","data/actions/state.js","components/MatchRow/MatchRow.js","axios/axios.js","components/MatchRow/index.js","data/actions/api.js","components/Loading/Loading.js","components/Loading/index.js","components/MatchHistory/MatchHistory.js","components/MatchHistory/index.js","components/PitchSection/PitchSection.js","components/PitchSection/index.js","components/Pitch/Pitch.js","components/ScoreDisplay/ScoreDisplay.js","components/ScoreDisplay/index.js","components/Scores/Scores.js","components/TeamInfo/TeamInfo.js","components/TeamInfo/index.js","components/PlayerEntry/PlayerEntry.js","components/PlayerEntry/index.js","components/TeamSize/TeamSize.js","components/TeamSize/index.js","components/MatchOptions/MatchOptions.js","components/MatchOptions/index.js","components/PitchBanner/PitchBanner.js","components/PitchBanner/index.js","components/MatchPlay/MatchPlay.js","components/MatchPlay/index.js","App/App.js","data/initialState.js","data/reducer.js","data/store.js","index.js"],"names":["module","exports","Header","largeHeader","useMediaPredicate","className","Nav","href","Footer","icon","faGithubSquare","FourOhFour","Instructions","showInstructions","handleClick","useState","spinBall","setSpinBall","faUserPlus","size","faUsers","faFutbol","spin","onClick","connect","dispatch","type","MatchRow","match","handleDelete","teamSize","team_size","aria-label","id","faTrashAlt","teamA","name","score","faMinus","teamB","axios","create","baseURL","headers","Accept","delete","then","removeMatch","deleteMatch","Loading","this","props","loaded","handleLoad","children","alt","src","loader","Component","matchHistoryLoaded","get","data","matchHistory","loadMatchHistory","MatchHistory","map","i","key","PitchSection","players","player","state","team","position","filter","Pitch","positions","reverse","ScoreDisplay","handleChange","increment","newScore","faPlus","value","changeScore","Scores","TeamInfo","edit","handleSubmit","initialTeamA","initialTeamB","setTeamA","setTeamB","onSubmit","e","preventDefault","htmlFor","onChange","currentTarget","required","editTeamName","playersFilled","names","PlayerEntry","teamsFilled","playerName","setPlayerName","addPlayer","TeamSize","initial","min","max","count","setCount","newCount","MatchOptions","handleReset","handleShuffle","handleComplete","getState","team_a_name","team_b_name","team_a_score","team_b_score","game_complete","post","PitchBanner","MatchPlay","App","exact","path","component","initialState","getRandomInt","Math","ceil","floor","random","shuffleTeams","teamAplayers","array","length","rand","temp","knuthShuffle","slice","teamBplayers","reducer","action","toggleInstructions","index","numDefenders","setTeamSize","setTeamNames","editTeamNames","loadHistory","updateScore","reset","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","persistState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f681e9c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader-large.2151e713.png\";","import React from 'react';\nimport { useMediaPredicate } from \"react-media-hook\";\n\nconst Header = () => {\n    const largeHeader = useMediaPredicate(\"(min-width: 730px)\"); // use this react-media-hook to determine the screen width and make header text responsive\n\n    return (\n        <header className=\"main-header\">\n            <h1 className=\"main-header-text\">\n                {/* only display COY__! on smaller screens */}\n                { largeHeader ?\n                    // Come On You ____ !\n                    (<><span className=\"accent-color\">C</span>ome <span className=\"accent-color\">O</span>n <span className=\"accent-color\">Y</span>ou _____ !</>)\n                    :\n                    // COY_!\n                    (<span className=\"accent-color\">COY__!</span>)\n                }\n            </h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst Nav = () => {\n    return (\n        <nav>\n            <a \n                className=\"nav-left-tab\" \n                href=\"#/\"\n            >\n                Play\n            </a>\n            <a \n                className=\"nav-right-tab\" \n                href=\"#/match-history\"\n            >\n                Match History\n            </a>\n        </nav>\n    )\n}\n\nexport default Nav;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithubSquare } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => (\n    <footer className=\"main-footer\">\n        <p>&#169; 2020 Nik Osvalds</p>\n        <a className=\"icon-link\" href=\"https://github.com/nosvalds/come-on-you-team\">\n            <FontAwesomeIcon icon={ faGithubSquare } />\n        </a>\n    </footer>\n)\n\nexport default Footer;","import React from \"react\";\n\nconst FourOhFour = () => (\n    <section className=\"four-oh-four\">\n        <h3>\n            Page not found! Head <a href=\"/\">home</a> to start over.\n        </h3>\n    </section>\n)\nexport default FourOhFour;","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUsers, faUserPlus, faFutbol } from '@fortawesome/free-solid-svg-icons'\n\nconst Instructions = ({ showInstructions, handleClick }) => {\n    const [spinBall, setSpinBall] = useState(true);\n    \n    return (\n        <section className=\"instructions-section\">\n            { showInstructions ?\n                <>\n                    <header className=\"instructions-header\">\n                        <h2>HOW IT WORKS</h2>\n                        <p>Randomly select teams and track scores for football matches</p>\n                    </header>\n                    <div className=\"instructions-card-container\">\n                        <div className=\"instructions-card\">\n                            <FontAwesomeIcon icon={ faUserPlus } className=\"instructions-icon\" size=\"lg\"/>\n                            <h5>Player entry</h5>\n                            <p>Select the number of players per side you would like. Then enter the players names. They will be added randomly to the pitch. Once complete you have the option of shuffling the teams by clicking the \"shuffle teams\" button below the pitch.</p>\n                        </div>\n                        <div className=\"instructions-card\">\n                            <FontAwesomeIcon icon={ faUsers } className=\"instructions-icon\"  />\n                            <h5>Team info</h5>\n                            <p>Fill out your team names or accept the defaults. Then you're ready to play! You can click \"Start Over\" if you've made a mistake or don't want to save the match.</p>\n                        </div>\n                        <div className=\"instructions-card\">\n                            <FontAwesomeIcon \n                                icon={ faFutbol } \n                                className=\"instructions-icon ball\" \n                                spin={ spinBall }\n                                onClick={ () => setSpinBall(!spinBall) }\n                            />\n                            <h5>Score and save</h5>\n                            <p>Update scores with the counters underneath the team names as you go or after the match. Once the match is over press the \"Match Complete\" button to save the match format and score. View results of previous matches on the \"Match History\" tab.</p>\n                        </div>\n                    </div>\n                </>\n                :\n                null\n            }\n            <button\n                onClick={ () => handleClick() }\n            >\n                { showInstructions ? \"Hide Instructions\" : \"Show Instructions\" }\n            </button>\n        </section>\n)}\n\nexport default Instructions;","import { connect } from 'react-redux';\nimport Instructions from './Instructions';\nimport { toggleInstructions } from '../../data/actions/state';\n\nconst mapStateToProps = ({ showInstructions }) => {\n    return {\n        showInstructions\n    };\n}\n\nconst matchDispatchToProps = (dispatch) => {\n    return {\n        // dispatch API action to get match history from the database\n        handleClick: () => dispatch(toggleInstructions()), \n    }\n}\n\nexport default connect(mapStateToProps, matchDispatchToProps)(Instructions);","// state actions\n\nexport const addPlayer = (name) => {\n    return {\n        type: \"ADD_PLAYER\",\n        name\n    }\n}\n\nexport const setTeamSize = (teamSize) => {\n    return {\n        type: \"SET_TEAM_SIZE\",\n        teamSize\n    }\n}\n\nexport const setTeamNames = ({ teamA, teamB}) => {\n    return {\n        type: \"SET_TEAM_NAMES\",\n        teamA,\n        teamB,\n    }\n}\n\nexport const editTeamNames = () => {\n    return {\n        type: \"EDIT_TEAM_NAMES\",\n    }\n}\n\nexport const resetMatch = () => {\n    return {\n        type: \"RESET\",\n    }\n}\n\nexport const shuffleTeams = () => {\n    return {\n        type: \"SHUFFLE_TEAMS\",\n    }\n}\n\n// pass data in as matchHistory\nexport const loadMatchHistory = (data) => {\n    return {\n        type: \"LOAD_HISTORY\",\n        matchHistory: data,\n    }\n}\n\nexport const removeMatch = (id) => {\n    return {\n        type: \"REMOVE_MATCH\",\n        id,\n    }\n}\n\nexport const changeScore = (value, team) => {\n    return {\n        type: \"CHANGE_SCORE\",\n        score: +value, // make sure this is passed in as a number\n        team,\n    }\n}\n\nexport const toggleInstructions = () => {\n    return {\n        type: \"TOGGLE_INSTRUCTIONS\",\n    }\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\n\nconst MatchRow = ({ match, handleDelete }) => {\n    let teamSize = match.team_size;\n    return (\n        <>\n            <tr>\n                <td aria-label=\"match id and team size\">\n                    <span className=\"match-id\">Match { match.id }</span> \n                    { `${teamSize} x ${teamSize}` }\n                </td>\n                <td></td>\n                <td>\n                </td>\n                <td></td>\n                <td>\n                    <button \n                        className=\"btn-primary\" \n                        aria-label=\"delete game button\"\n                        onClick={ () => handleDelete(match.id) }\n                    >\n                        <FontAwesomeIcon icon={ faTrashAlt } />\n                    </button>\n                </td>\n            </tr>\n            <tr>\n                <td aria-label=\"Team A name\">{ match.teamA.name }</td>\n                <td aria-label=\"Team A score\">{ match.teamA.score }</td>\n                <td>\n                    <FontAwesomeIcon icon={ faMinus } />\n                </td>\n                <td aria-label=\"Team B score\">{ match.teamB.score }</td>\n                <td aria-label=\"Team B name\">{ match.teamB.name }</td>\n            </tr>\n        </>\n    )\n}\n\nexport default MatchRow;","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: (process.env.NODE_ENV === 'production') ? \n    \"https://niks-cors-anywhere.herokuapp.com/https://come-on-you-team.herokuapp.com/api/matches\" // production url\n    : \"http://homestead.test/api/matches\", // url from vagrant/homestead virtual machine for development\n  headers: {\n    Accept: \"application/json\",\n  }\n})","import { connect } from 'react-redux';\nimport MatchRow from './MatchRow';\nimport { deleteMatch } from '../../data/actions/api';\n\n// dispatch the addPlayer action to assign the player to a team\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleDelete: (id) => dispatch(deleteMatch(id)),\n    }\n}\n\nexport default connect(\"\", mapDispatchToProps)(MatchRow);","import axios from '../../axios/axios';\nimport { loadMatchHistory, removeMatch, resetMatch } from './state';\n\n// api actions\n\nexport const getMatchHistory = () => {\n    return (dispatch) => {\n        // now use axios to make an API request\n        axios.get(\"\").then(({ data }) => {\n            dispatch(loadMatchHistory(data.data));\n        });\n    };\n}\n\nexport const deleteMatch = (id) => {\n    return (dispatch) => {\n        // use axios to make DELETE request\n        axios.delete(`${id}`).then(() => {\n            dispatch(removeMatch(id)); // once this is complete, delete match id from history\n        })\n    }\n}\n\nexport const postMatch = () => {\n    return (dispatch, getState) => {\n        // get values needed from state to post\n        let { \n            teamSize,\n            teamA,\n            teamB,\n        } = getState();\n\n        // format data for the post request to the API\n        let data = {\n            team_size: teamSize,\n            team_a_name: teamA.name,\n            team_b_name: teamB.name,\n            team_a_score: teamA.score,\n            team_b_score: teamB.score,\n            game_complete: true,\n        }\n\n        // use axios to make a POST request and save the match to the DB, then dispatch a reset for state\n        axios.post(\"\",data).then(({ data }) => {\n            dispatch(resetMatch());\n        })\n    }\n}","import React, { Component } from \"react\";\nimport loader from '../../img/loader-large.png';\n\nclass Loading extends Component {\n\n    // triggers the handleLoad action when Loading component first renders\n    componentDidMount() {\n        // if loaded flag is already true we don't need to query the API again\n        if (!this.props.loaded) {\n            this.props.handleLoad();\n        }\n    }\n\n    render() {\n        // displays the loader image until loaded is true. Then it displays the children component (what Loaded wraps)\n        const { children, loaded } = this.props;\n        return loaded ? children : (\n            <div className=\"loader\" aria-label=\"Loading...\">\n                <img alt=\"Loading\" src={loader} />\n            </div>\n        );\n}\n}\nexport default Loading;","import { connect } from 'react-redux';\nimport Loading from './Loading';\nimport {getMatchHistory} from '../../data/actions/api';\n\nconst mapStateToProps = ({ matchHistoryLoaded }) => {\n    return {\n        loaded: matchHistoryLoaded,\n    };\n}\n\nconst matchDispatchToProps = (dispatch) => {\n    return {\n        // dispatch API action to get match history from the database\n        handleLoad: () => dispatch(getMatchHistory()), \n    }\n}\n\nexport default connect(mapStateToProps, matchDispatchToProps)(Loading);","import React from 'react';\nimport MatchRow from '../MatchRow/'\nimport Loading from '../Loading/';\n\nconst MatchHistory = ({ matchHistory }) => (\n    <section className=\"match-hist-section\">\n        <header>\n            <h3 className=\"match-hist-header\">Match History</h3>\n        </header>\n        {/* wrap with Loading component so user sees loading spinner while waiting for response from the API */}\n        <Loading>\n            <table className=\"match-hist-table\">\n                <thead>\n                </thead>\n                <tbody>\n                    { matchHistory.map((match, i) => (\n                        <MatchRow key={ i } match={ match } />\n                    ))}\n                </tbody>\n            </table>\n        </Loading>\n    </section>\n)\n\nexport default MatchHistory;","import { connect } from 'react-redux';\nimport MatchHistory from './MatchHistory';\n\n// pass in the match history from state\nconst mapStateToProps = ({ matchHistory }) => {\n    return {\n        matchHistory\n    };\n}\n\nexport default connect(mapStateToProps)(MatchHistory);","import React from 'react';\n\nconst PitchSection = ({ players }) => {\n    return (\n        <section className=\"pitch-section-container\">\n            {/* map over the players array and output their name on the pitch */}\n            { players.map((player, i) => (\n                    <h4\n                        key={ i }\n                        className=\"player-name\"\n                    >\n                        { player.name }\n                    </h4>\n                ))\n            }\n        </section>\n    )\n}\n\nexport default PitchSection;","import { connect } from 'react-redux';\nimport PitchSection from './PitchSection';\n\nconst mapStateToProps = ( state, { team, position }) => {\n    // use team and position props to get the correct players from state to pass to the Pitch Section\n    return {\n       players: state[team].players.filter((player) => (player.position === position)),\n    };\n}\n\nexport default connect(mapStateToProps)(PitchSection);","import React from 'react';\nimport PitchSection from '../PitchSection';\n\nconst Pitch = () => {\n    let positions = [\"GK\", \"D\", \"F\"]; // could have this in state and allow modification for future functionality (adding Midfield for example)\n\n    return (\n        <section className=\"pitch-container-background\">\n            <div className=\"pitch-container-inside\">\n                {/* loop over positions array to render a pitch section with players */}\n                { positions.map((position, i) => (\n                    <PitchSection key={ i } team={ \"teamA\" } position={ position }/>\n                ))}\n                {/* Have to reverse the positions for team B as page is rendered left to right */}\n                { positions.reverse().map((position, i) => (\n                    <PitchSection key={ i } team={ \"teamB\" } position={ position }/>\n                ))}\n            </div>\n        </section>\n    )\n}\n\nexport default Pitch;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\n\n// Component displays the team score and allows it to be incremented up (and down) if neccessary\n\nconst ScoreDisplay = ({ team, score, handleChange }) => {\n    const handleClick = (increment) => {\n        // calculate the next value\n        let newScore = score + increment; \n        // check it's within bounds, then call handleChange function to dispatch a change to state with that value, otherwise don't alter state\n        if (newScore >= 0) { \n            handleChange(newScore, team);\n        } \n    }\n    \n    return (\n        <div className=\"score-display\">\n            <div className=\"increment-container\">\n                <button \n                    onClick={() => handleClick(-1)} // pass increment into handleClick\n                    className=\"btn-increment btn-increment-l\"\n                >\n                    <FontAwesomeIcon icon={ faMinus } />\n                </button>\n                <h5>{ score }</h5>\n                <button \n                    onClick={() => handleClick(1)} // pass increment into handleClick\n                    className=\"btn-increment btn-increment-r\"\n                >\n                    <FontAwesomeIcon icon={ faPlus } />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default ScoreDisplay;","import { connect } from 'react-redux';\nimport ScoreDisplay from './ScoreDisplay';\nimport { changeScore } from '../../data/actions/state';\n\n// calculate and pass in whether or not the teams have full rosters of players\nconst mapStateToProps = (state, { team }) => {\n    return {\n        score: state[team].score // using the team prop passed in send the right teams score to ScoreDisplay\n    }\n}\n\n// dispatch the updateScore \nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleChange: (value, team) => dispatch(changeScore(value, team)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreDisplay);","import React from 'react';\nimport ScoreDisplay from '../ScoreDisplay';\n\nconst Scores = () => (\n    <section className=\"score-section\">\n        <ScoreDisplay team=\"teamA\"/>\n        <ScoreDisplay team=\"teamB\"/>\n    </section>\n)\n\nexport default Scores;","import React, { useState } from 'react';\n\nconst TeamInfo = ({ edit, handleSubmit, handleClick, initialTeamA, initialTeamB }) => {\n    // track form input state locally in the component\n    const [teamA, setTeamA] = useState(initialTeamA);\n    const [teamB, setTeamB] = useState(initialTeamB);\n\n    // inputs are controlled components\n    const handleChangeA = (e) => {\n        setTeamA(e.currentTarget.value);\n    }\n    // inputs are controlled components\n    const handleChangeB = (e) => {\n        setTeamB(e.currentTarget.value);\n    }\n\n    const formSubmit = (e) => {\n        e.preventDefault(); // prevent default behavior of a page refresh\n        // call the handleSubmit function passed from redux with team names as arguments.\n        handleSubmit({ \n            teamA,\n            teamB\n        });\n    }\n\n    return ( \n        <section className=\"team-info\">\n            { edit ?\n                <form\n                    className=\"team-entry-form\"\n                    onSubmit={ formSubmit }\n                >\n                    <section className=\"form-section\">\n                        <label\n                            htmlFor=\"teamA\"\n                            className=\"team-name-label\"\n                            aria-label=\"Team A name\"\n                        >\n                        </label>\n                        <input\n                            type=\"text\"\n                            id=\"teamA\"\n                            className=\"name-input\"\n                            value={ teamA }\n                            onChange={ handleChangeA }\n                            required\n                        />\n                    </section>\n                    <section className=\"form-section\">\n                        <label\n                            htmlFor=\"teamA\"\n                            className=\"team-name-label\"\n                            aria-label=\"Team B name\"\n                        >\n                        </label>\n                        <input\n                            type=\"text\"\n                            id=\"teamA\"\n                            className=\"name-input\"\n                            value={ teamB }\n                            onChange={ handleChangeB }\n                            required\n                        />\n                    </section>\n                    <button\n                        className=\"btn-primary\"\n                    >\n                        Set\n                    </button>\n                </form>\n                : \n                <>\n                    <h3\n                        onClick={ handleClick }\n                    >\n                        { teamA }\n                    </h3>\n                    <h3\n                        onClick={ handleClick }    \n                    >\n                        { teamB }\n                    </h3> \n                </>\n            }\n        </section>\n    )\n}\n\nexport default TeamInfo;","import { connect } from 'react-redux';\nimport TeamInfo from './TeamInfo';\nimport { setTeamNames, editTeamNames } from '../../data/actions/state';\n\nconst mapStateToProps = (state) => {\n    let teamSize = state.teamSize;\n    return {\n        // edit flag: if both editTeamName and players are filled are true then show form input. The second part makes it so that edit team names is show after the players are filled out. the manual edit flag is for future editing.\n        edit: (state.editTeamName && (state.teamA.playersFilled === teamSize && state.teamB.playersFilled === teamSize)),\n        initialTeamA: state.teamA.name,\n        initialTeamB: state.teamB.name,\n    };\n}\n\n// dispatch the addPlayer action to assign the player to a team\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleSubmit: (names) => dispatch(setTeamNames(names)), // sets team name in state\n        handleClick: () => dispatch(editTeamNames()), // flips the editTeamName flag in state\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInfo);","import React, { useState } from 'react';\n\nconst PlayerEntry = ({ handleSubmit, teamsFilled }) => {\n    // useState for the form input control to manage state locally rather than at the app level\n    const [playerName, setPlayerName] = useState(\"\");\n\n    // input is a controlled component\n    const handleChange = (e) => {\n        setPlayerName(e.currentTarget.value);\n    }\n\n    // call handleSubmit and pass the playerName from the input field\n    const handleFormSubmit = (e) => {\n        e.preventDefault(); // prevent page refresh default browser behavior\n        handleSubmit(playerName);\n        setPlayerName(\"\"); // clear out input field once submitted so user can type next player name\n    }\n\n    return ( !teamsFilled ? // if the teams are not full, then show the player entry form\n        <form\n            className=\"player-entry-form\"\n            onSubmit={ handleFormSubmit } \n        >\n            <section className=\"form-section\">\n                <label\n                    htmlFor=\"playerName\"\n                    className=\"player-name-label\"\n                >\n                    Player Name\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"playerName\"\n                    className=\"name-input\"\n                    value={ playerName }\n                    onChange={ handleChange }\n                    required\n                />\n            </section>\n            <button\n                className=\"btn-primary\"\n            >\n                Add Player\n            </button>\n        </form>\n        : \n        null\n    )\n}\n\nexport default PlayerEntry;\n","import { connect } from 'react-redux';\nimport PlayerEntry from './PlayerEntry';\nimport { addPlayer } from '../../data/actions/state';\n\n// calculate and pass in whether or not the teams have full rosters of players\nconst mapStateToProps = (state) => {\n    let teamSize = state.teamSize;\n    return {\n        teamsFilled: (state.teamA.playersFilled === teamSize && state.teamB.playersFilled === teamSize)\n    };\n}\n\n// dispatch the addPlayer action to assign the player to a team\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleSubmit: (name) => dispatch(addPlayer(name)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerEntry);","import React, { useState } from 'react';\n\n// Icon imports from fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\n\nconst TeamSize = ({ initial, min, max, handleSubmit }) => {\n    // track this state locally\n    const [count, setCount] = useState(initial);\n\n    const handleClick = (increment) => {\n        let newCount = count + increment; // calculate the next value\n        if (newCount <= max && newCount >= min) { // check it's within bounds, then update state with that value, otherwise don't alter state\n            setCount(newCount);\n        } \n    }\n\n    return (\n        <section className=\"team-size-section\">\n            <h5>Team Size</h5>\n            <div className=\"increment-container\">\n                <button \n                    onClick={() => handleClick(-1)} // pass increment into handleClick\n                    className=\"btn-increment btn-increment-l\"\n                >\n                    <FontAwesomeIcon icon={ faMinus } />\n                </button>\n                <h5>{ count }</h5> {/* display the count */}\n                <button \n                    onClick={() => handleClick(1)} // pass increment into handleClick\n                    className=\"btn-increment btn-increment-r\"\n                >\n                    <FontAwesomeIcon icon={ faPlus } />\n                </button>\n            </div>\n            <button\n                className=\"btn-primary\"\n                onClick={ () => handleSubmit(count) } // submit the final count to be saved in App state\n            >\n                Set\n            </button>\n        </section>\n    );\n}\n\nexport default TeamSize;","import { connect } from 'react-redux';\nimport TeamSize from './TeamSize';\nimport { setTeamSize } from '../../data/actions/state';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleSubmit: (value) => dispatch(setTeamSize(value)), // dispatch the setTeamSize action to set the team size in state\n    };\n}\n\nexport default connect(\"\", mapDispatchToProps)(TeamSize);","import React from \"react\";\n\nconst MatchOptions = ({ teamsFilled, handleReset, handleShuffle, handleComplete }) => (\n    <section className=\"match-options-section\">\n        <button \n            className=\"btn-primary\"\n            onClick={ handleReset }\n        >\n            Start Over\n        </button>\n        {/* Only show these buttons once the teams are filled with players */}\n        { teamsFilled ?\n            <>\n                <button \n                    className=\"btn-primary\"\n                    onClick={ handleComplete }\n                >\n                    Match Complete\n                </button>\n                <button \n                    className=\"btn-primary\"\n                    onClick={ handleShuffle }\n                >\n                    Shuffle Teams\n                </button>\n            </>\n            : null\n        }\n    </section>\n)\n\nexport default MatchOptions;","import { connect } from 'react-redux';\nimport MatchOptions from './MatchOptions';\nimport { resetMatch, shuffleTeams } from '../../data/actions/state';\nimport { postMatch } from '../../data/actions/api';\n\n// calculate and pass in whether or not the teams have full rosters of players\nconst mapStateToProps = (state) => {\n    let teamSize = state.teamSize;\n    return {\n        teamsFilled: (state.teamA.playersFilled === teamSize && state.teamB.playersFilled === teamSize)\n    };\n}\n\n// dispatch the actions for each of the buttons\nconst mapDispatchToProps = (dispatch, state) => {\n    return {\n        handleReset: () => dispatch(resetMatch()),\n        handleShuffle: () => dispatch(shuffleTeams()),\n        handleComplete: () => dispatch(postMatch(state))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatchOptions);","import React from 'react';\n\n// Option 1: teams filled = true and editTeamName = true, then direct user to edit the team names\n// Option 2: teams filled = true and editTeamName = false, Game On!\n// Option 3: teams filled = false - teams are not filled - show nothing\nconst PitchBanner = ({ teamsFilled, editTeamName }) => (\n    (teamsFilled && editTeamName) ?\n        (\n            <h3 className=\"pitch-header\">\n                Players set, now name your teams!\n            </h3>\n        )\n        : (\n            (teamsFilled) ? \n                (\n                    <h3 className=\"pitch-header\">\n                        Teams Complete, Game On!\n                    </h3>\n                )\n            :\n            null\n        )\n)\n\nexport default PitchBanner;","import { connect } from 'react-redux';\nimport PitchBanner from './PitchBanner';\n\n// calculate and pass in whether or not the teams have full rosters of players, as well as the editTeamName flag\nconst mapStateToProps = ({ teamSize, editTeamName, teamA, teamB}) => {\n    return {\n        teamsFilled: (teamA.playersFilled === teamSize && teamB.playersFilled === teamSize),\n        editTeamName,\n    };\n}\n\nexport default connect(mapStateToProps)(PitchBanner);","import React from 'react';\n\n// Standard Components\nimport Pitch from '../Pitch/Pitch';\nimport Scores from '../Scores/Scores';\n\n// React-Redux Components (state/dispatch passed from index.js)\nimport TeamInfo from '../TeamInfo';\nimport PlayerEntry from '../PlayerEntry';\nimport TeamSize from '../TeamSize';\nimport MatchOptions from '../MatchOptions';\nimport PitchBanner from '../PitchBanner';\n\nconst MatchPlay = ({ teamSize }) => { \n    // If teamSize equals 0 then show the TeamSize component to set the team size. If teamsize is set, then show the match play components.\n    return teamSize === 0 ?\n        <TeamSize initial={ 5 } min={ 3 } max={ 11 } />\n        :\n        <>\n            <PitchBanner />\n            <PlayerEntry />\n            <TeamInfo />\n            <Scores />\n            <Pitch />\n            <MatchOptions />\n        </>\n}\n\nexport default MatchPlay;","import { connect } from 'react-redux';\nimport MatchPlay from './MatchPlay';\n\nconst mapStateToProps = ({ teamSize }) => {\n    // pass teamSize from state into MatchPlay\n    return {\n        teamSize\n    }\n}\n\nexport default connect(mapStateToProps)(MatchPlay);","import React from 'react';\n\n// import the react-router components, use HashRouter for github pages deployment\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  } from \"react-router-dom\";\n\n// Standard React Components\nimport Header from '../components/Header/Header';\nimport Nav from '../components/Nav/Nav';\nimport Footer from '../components/Footer/Footer';\nimport FourOhFour from '../components/FourOhFour/FourOhFour';\n\n\n// React-Redux (state and dispatch passed from index.js)\nimport Instructions from '../components/Instructions';\nimport MatchHistory from '../components/MatchHistory';\nimport MatchPlay from '../components/MatchPlay';\n\nfunction App() {\n  return (\n    <main className=\"main-app\">\n      <Router>\n        <Header />\n        <Nav />\n        <Instructions />\n          <Switch>\n            <Route exact path=\"/\" component={ MatchPlay } />\n            <Route exact path=\"/match-history\" component={ MatchHistory } />\n            <FourOhFour />\n          </Switch>\n        <Footer />\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","// If you don't have the back-end set up and would like some test data, uncomment the below line and set matchHistory equal to this in initialState\n// import matchHistory from './testMatchData'; \n\nconst initialState = {\n    teamSize: 0,\n    editTeamName: true,\n    showInstructions: true,\n    teamA: {\n        name: \"Team A\",\n        playersFilled: 0,\n        players: [],\n        score: 0,\n    },\n    teamB: {\n        name: \"Team B\",\n        playersFilled: 0,\n        players: [],\n        score: 0,\n    },\n    matchHistory: [],\n    matchHistoryLoaded: false, \n  };\n  \n  export default initialState;","import initialState from './initialState';\n\n// random integer function\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \n}\n\n\n// randomly add a player to a team\nconst addPlayer = (state, action) => {\n  // pick a random team\n  let team = getRandomInt(1, 2) === 1 ? \"teamA\" : \"teamB\";\n  // pick a random position \n  let i = getRandomInt(0, state.teamSize - 1);\n  // only add the player name to the position if it's not already filled\n  if (state[team].players[i].name !== \"\") {\n    // if already filled call this function again to try another random spot\n    return addPlayer(state, action);\n  } else {\n    // otherwise we've found an empty spot and we can save the players name into the position\n    return {\n      ...state,\n      [team]: {\n        ...state[team],\n        playersFilled: state[team].playersFilled + 1, // increment the number of players filled\n        players: state[team].players.map((player, index) => { // save the player name into the randomly selected position\n          return index === i ? {...player, name: action.name} : {...player};\n        })\n      }\n    }\n  }\n}\n\n// set the team size and create initial state of players array (of objects) with their positions\nconst setTeamSize = (state, action) => {\n  let players = [];\n  let position = \"\";\n  let size = action.teamSize;\n  let numDefenders = Math.floor((size - 1) / 2); // calculate the number of defenders from team size\n\n  // set the positions\n  for (let i = 0; i < size; i += 1) {\n    if (i === 0) {\n      position = \"GK\"\n    } else if (i >= 1 && i <= numDefenders){\n      position = \"D\"\n    } else {\n      position = \"F\"\n    }\n\n    players[i] = { \n      name: \"\",\n      position, \n    };\n  }\n\n  return {\n    ...state,\n    teamSize: action.teamSize,\n    teamA: {\n      ...state.teamA,\n      players\n    },\n    teamB: {\n      ...state.teamB,\n      players\n    }\n  }\n} \n\n// Update Team names\nconst setTeamNames = (state, action) => {\n  return {\n    ...state,\n    teamA: {...state.teamA, name: action.teamA },\n    teamB: {...state.teamB, name: action.teamB },\n    editTeamName: false,\n  }\n}\n\n// flip editTeamName to true to allow editing of the team names\nconst editTeamNames = (state) => {\n  return {\n    ...state,\n    editTeamName: true,\n  }\n}\n\n// knuth shuffle function, randomly shuffles an array efficiently, for use with the Shuffle Teams button\nconst knuthShuffle = (array) => {\n  for (let i = array.length - 1; i > 0; i -= 1) {\n    let rand = Math.floor((i + 1) * Math.random()); //get random between zero and i (inclusive)\n    let temp = array[i];   //swap i and the random index\n    array[i] = array[rand];\n    array[rand] = temp;\n  }\n\n  return array;\n}\n\n\n// shuffle the teams randomly using knuth shuffle method\nconst shuffleTeams = (state) => {\n  // get list of players into one array from the 2 teams\n  let players = [...state.teamA.players.map((player) => (player.name)), ...state.teamB.players.map((player) => (player.name))];\n  players = knuthShuffle(players); // shuffle the array\n\n  // separate the array back into the 2 teams\n  let teamAplayers = players.slice(0,(players.length / 2));\n  let teamBplayers = players.slice((players.length / 2));\n\n  return {\n    ...state,\n    teamA: {\n      ...state.teamA,\n      // update the player names in state after they've been shuffled\n      players: state.teamA.players.map((player, i) => \n        ({...player, name: teamAplayers[i]})\n      ), \n    },\n    teamB: {\n      ...state.teamB,\n      // update the player names in state after they've been shuffled\n      players: state.teamB.players.map((player, i) => \n        ({...player, name: teamBplayers[i]})\n      ), \n    }\n  }\n}\n\n// match history is an array of matches, save it directly into state\nconst loadHistory = (state, { matchHistory }) => {\n  return {\n    ...state,\n    matchHistory,\n    matchHistoryLoaded: true, // flip to true now that it's loaded into state\n  }\n}\n\n// remove a single match from the matchHistory using filter\nconst removeMatch = (state, { id }) => {\n  return {\n    ...state,\n    matchHistory: state.matchHistory.filter((match) => (match.id !== id)),\n  }\n}\n\n// update score for a team\nconst updateScore = (state, {score, team}) => {\n  return {\n    ...state,\n    [team]: {\n      ...state[team], \n      score, // update score in specific team object, copy everything else\n    }\n  }\n}\n\n// flip boolean\nconst toggleInstructions = (state) => {\n  return {\n    ...state,\n    showInstructions: !state.showInstructions,\n  }\n}\n\nconst reset = (state) => {\n  return {\n    ...initialState,\n    showInstructions: state.showInstructions // preserve this user choice\n  }\n}\n\n// Reducer function\nconst reducer = (state, action) => {\n    switch (action.type) {\n      case \"TOGGLE_INSTRUCTIONS\": return toggleInstructions(state);\n      case \"ADD_PLAYER\": return addPlayer(state, action); // add player randomly into a position\n      case \"SET_TEAM_SIZE\": return setTeamSize(state, action);\n      case \"SET_TEAM_NAMES\": return setTeamNames(state, action);\n      case \"EDIT_TEAM_NAMES\": return editTeamNames(state);\n      case \"SHUFFLE_TEAMS\": return shuffleTeams(state);\n      case \"LOAD_HISTORY\": return loadHistory(state, action); // load match history into state\n      case \"REMOVE_MATCH\": return removeMatch(state, action); // remove a single match history from state\n      case \"CHANGE_SCORE\": return updateScore(state, action); // update score\n      case \"RESET\": return reset(state); // back to initial state\n      default: return state;\n    }\n  }\n  \n  export default reducer;","import { createStore, compose, applyMiddleware } from 'redux';\n\nimport initialState from './initialState';\nimport reducer from './reducer';\n\n// middleware to allow axios API calls\nimport thunk from \"redux-thunk\";\n\n// local storage\nimport persistState from \"redux-localstorage\";\n\n  // set up redux dev tools \n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  // store set up\n  const store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n      applyMiddleware(thunk), // thunk middleware for API calls\n      persistState() // saves state into local storage so that it persists after refresh of the browser\n    )\n  );\n  \n  export default store;","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\n\n// data store for Redux\nimport store from './data/store';\n\n// CSS\nimport './css/style.css';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}