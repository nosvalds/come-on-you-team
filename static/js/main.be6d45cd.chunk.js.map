{"version":3,"sources":["components/Header/Header.js","components/PitchSection/PitchSection.js","components/PitchSection/index.js","components/Pitch/Pitch.js","components/Footer/Footer.js","components/TeamInfo/TeamInfo.js","components/TeamInfo/index.js","data/actions/state.js","components/PlayerEntry/PlayerEntry.js","components/PlayerEntry/index.js","components/TeamSize/TeamSize.js","components/TeamSize/index.js","components/MatchOptions/MatchOptions.js","components/MatchOptions/index.js","components/PitchBanner/PitchBanner.js","components/PitchBanner/index.js","App/App.js","App/index.js","data/initialState.js","data/reducer.js","data/store.js","index.js"],"names":["Header","largeHeader","useMediaPredicate","className","PitchSection","players","map","player","i","key","name","connect","state","team","position","filter","Pitch","positions","reverse","Footer","href","icon","faGithubSquare","TeamInfo","edit","handleSubmit","handleClick","initialTeamA","initialTeamB","useState","teamA","setTeamA","teamB","setTeamB","onSubmit","e","preventDefault","htmlFor","aria-label","type","id","value","onChange","currentTarget","required","onClick","teamSize","editTeamName","playersFilled","dispatch","names","PlayerEntry","teamsFilled","playerName","setPlayerName","addPlayer","TeamSize","initial","min","max","count","setCount","increment","newCount","faMinus","faPlus","MatchOptions","handleReset","handleShuffle","PitchBanner","App","initialState","getRandomInt","Math","ceil","floor","random","shuffleTeams","teamAplayers","array","length","rand","temp","knuthShuffle","slice","teamBplayers","reducer","action","index","size","numDefenders","setTeamSize","setTeamNames","editTeamNames","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be6d45cd.chunk.js","sourcesContent":["import React from 'react';\nimport { useMediaPredicate } from \"react-media-hook\";\n\nconst Header = () => {\n    const largeHeader = useMediaPredicate(\"(min-width: 730px)\"); // use this react-media-hook to determine the screen width and make header responsive\n\n    return (\n        <header className=\"main-header\">\n            <h1 className=\"main-header-text\">\n                { largeHeader ?\n                    (<><span className=\"accent-color\">C</span>ome <span className=\"accent-color\">O</span>n <span className=\"accent-color\">Y</span>ou _____ !</>)\n                    :\n                    (<span className=\"accent-color\">COY__!</span>)\n                }\n            </h1>\n            <p>Select your team size, add players to the pitch, then set your team name.</p>\n            <p>Players will be assigned randomly.</p>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst PitchSection = ({ players }) => {\n    return (\n        <section className=\"pitch-section-container\">\n            { players.map((player, i) => (\n                    <h4\n                        key={ i }\n                        className=\"player-name\"\n                    >\n                        { player.name }\n                    </h4>\n                ))\n            }\n        </section>\n    )\n}\n\nexport default PitchSection;","import { connect } from 'react-redux';\nimport PitchSection from './PitchSection';\n\nconst mapStateToProps = ( state, { team, position }) => {\n    // use team prop to get the correct players from state to pass to the Pitch Section\n    return {\n       players: state[team].players.filter((player) => (player.position === position)),\n    };\n}\n\nexport default connect(mapStateToProps)(PitchSection);","import React from 'react';\nimport PitchSection from '../PitchSection';\n\nconst Pitch = () => {\n    let positions = [\"GK\", \"D\", \"F\"]; // could have this in state and allow modification for future functionality\n\n    return (\n        <section className=\"pitch-container-background\">\n            <div className=\"pitch-container-inside\">\n                {/* loop over positions array to render a pitch section with players */}\n                { positions.map((position, i) => (\n                    <PitchSection key={ i } team={ \"teamA\" } position={ position }/>\n                ))}\n                {/* Have to reverse the positions for team B as page is rendered left to right */}\n                { positions.reverse().map((position, i) => (\n                    <PitchSection key={ i } team={ \"teamB\" } position={ position }/>\n                ))}\n            </div>\n        </section>\n    )\n}\n\nexport default Pitch;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithubSquare } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => (\n    <footer className=\"main-footer\">\n        <p>&#169; 2020 Nik Osvalds</p>\n        <a className=\"icon-link\" href=\"https://github.com/nosvalds/come-on-you-team\">\n            <FontAwesomeIcon icon={ faGithubSquare } />\n        </a>\n    </footer>\n)\n\nexport default Footer;","import React, { useState } from 'react';\n\nconst TeamInfo = ({ edit, handleSubmit, handleClick, initialTeamA, initialTeamB }) => {\n    const [teamA, setTeamA] = useState(initialTeamA);\n    const [teamB, setTeamB] = useState(initialTeamB);\n\n    // inputs are controlled components\n    const handleChangeA = (e) => {\n        setTeamA(e.currentTarget.value);\n    }\n    // inputs are controlled components\n    const handleChangeB = (e) => {\n        setTeamB(e.currentTarget.value);\n    }\n\n    const formSubmit = (e) => {\n        e.preventDefault();\n        handleSubmit({\n            teamA,\n            teamB\n        });\n        \n    }\n\n    return ( \n        <section className=\"team-info\">\n            { edit ?\n                <form\n                    className=\"team-entry-form\"\n                    onSubmit={ formSubmit }\n                >\n                    <section className=\"form-section\">\n                        <label\n                            htmlFor=\"teamA\"\n                            className=\"team-name-label\"\n                            aria-label=\"Team A name\"\n                        >\n                        </label>\n                        <input\n                            type=\"text\"\n                            id=\"teamA\"\n                            className=\"name-input\"\n                            value={ teamA }\n                            onChange={ handleChangeA }\n                            required\n                        />\n                    </section>\n                    <section className=\"form-section\">\n                        <label\n                            htmlFor=\"teamA\"\n                            className=\"team-name-label\"\n                            aria-label=\"Team B name\"\n                        >\n                        </label>\n                        <input\n                            type=\"text\"\n                            id=\"teamA\"\n                            className=\"name-input\"\n                            value={ teamB }\n                            onChange={ handleChangeB }\n                            required\n                        />\n                    </section>\n                    <button\n                        className=\"btn-primary\"\n                    >\n                        Set\n                    </button>\n                </form>\n                : \n                <>\n                    <h3\n                        onClick={ handleClick }\n                    >\n                        { teamA }\n                    </h3>\n                    <h3\n                        onClick={ handleClick }    \n                    >\n                        { teamB }\n                    </h3> \n                </>\n            }\n        </section>\n    )\n}\nexport default TeamInfo;","import { connect } from 'react-redux';\nimport TeamInfo from './TeamInfo';\nimport { setTeamNames, editTeamNames } from '../../data/actions/state';\n\n// calculate and pass in whether or not the teams have full rosters of players\nconst mapStateToProps = (state) => {\n    let teamSize = state.teamSize;\n    return {\n        edit: (state.editTeamName && (state.teamA.playersFilled === teamSize && state.teamB.playersFilled === teamSize)),\n        initialTeamA: state.teamA.name,\n        initialTeamB: state.teamB.name,\n    };\n}\n\n// dispatch the addPlayer action to assign the player to a team\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleSubmit: (names) => dispatch(setTeamNames(names)),\n        handleClick: () => dispatch(editTeamNames()),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInfo);","// state actions\n\nexport const addPlayer = (name) => {\n    return {\n        type: \"ADD_PLAYER\",\n        name\n    }\n}\n\nexport const setTeamSize = (teamSize) => {\n    return {\n        type: \"SET_TEAM_SIZE\",\n        teamSize\n    }\n}\n\nexport const setTeamNames = ({ teamA, teamB}) => {\n    return {\n        type: \"SET_TEAM_NAMES\",\n        teamA,\n        teamB,\n    }\n}\n\nexport const editTeamNames = () => {\n    return {\n        type: \"EDIT_TEAM_NAMES\",\n    }\n}\n\nexport const resetMatch = () => {\n    return {\n        type: \"RESET\",\n    }\n}\n\nexport const shuffleTeams = () => {\n    return {\n        type: \"SHUFFLE_TEAMS\",\n    }\n}","import React, { useState } from 'react';\n\nconst PlayerEntry = ({ handleSubmit, teamsFilled }) => {\n    // useState for the form input control to manage state locally rather than at the app level\n    const [playerName, setPlayerName] = useState(\"\");\n\n    // input is a controlled component\n    const handleChange = (e) => {\n        setPlayerName(e.currentTarget.value);\n    }\n\n    // call handleSubmit and pass the playerName from the input field\n    const handleFormSubmit = (e) => {\n        e.preventDefault(); // prevent page refresh default browser behavior\n        handleSubmit(playerName);\n        setPlayerName(\"\"); // clear out input field once submitted so user can type next player name\n    }\n\n    return ( !teamsFilled ? // if the teams are not full, then show the player entry form\n        <form\n            className=\"player-entry-form\"\n            onSubmit={ handleFormSubmit } \n        >\n            <section className=\"form-section\">\n                <label\n                    htmlFor=\"playerName\"\n                    className=\"player-name-label\"\n                >\n                    Player Name\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"playerName\"\n                    className=\"name-input\"\n                    value={ playerName }\n                    onChange={ handleChange }\n                    required\n                />\n            </section>\n            <button\n                className=\"btn-primary\"\n            >\n                Add Player\n            </button>\n        </form>\n        : \n        null\n    )\n}\n\nexport default PlayerEntry;\n","import { connect } from 'react-redux';\nimport PlayerEntry from './PlayerEntry';\nimport { addPlayer } from '../../data/actions/state';\n\n// calculate and pass in whether or not the teams have full rosters of players\nconst mapStateToProps = (state) => {\n    let teamSize = state.teamSize;\n    return {\n        teamsFilled: (state.teamA.playersFilled === teamSize && state.teamB.playersFilled === teamSize)\n    };\n}\n\n// dispatch the addPlayer action to assign the player to a team\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleSubmit: (name) => dispatch(addPlayer(name)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerEntry);","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\n\nconst TeamSize = ({ initial, min, max, handleSubmit }) => {\n    const [count, setCount] = useState(initial);\n\n    const handleClick = (increment) => {\n        let newCount = count + increment; // calculate the next value\n        if (newCount <= max && newCount >= min) { // check it's within bounds, then update state with that value, otherwise don't alter state\n            setCount(newCount);\n        } \n    }\n\n    return (\n        <>\n            \n            <section className=\"team-size-section\">\n                <h5>Team Size</h5>\n                <div className=\"increment-container\">\n                    <button \n                        onClick={() => handleClick(-1)} // pass increment into handleClick\n                        className=\"btn-increment btn-increment-l\"\n                    >\n                        <FontAwesomeIcon icon={ faMinus } />\n                    </button>\n                    <h5>{ count }</h5>\n                    <button \n                        onClick={() => handleClick(1)}\n                        className=\"btn-increment btn-increment-r\"\n                    >\n                        <FontAwesomeIcon icon={ faPlus } />\n                    </button>\n                </div>\n                <button\n                    className=\"btn-primary\"\n                    onClick={ () => handleSubmit(count) }\n                >\n                    Set\n                </button>\n            </section>\n        </>\n    );\n}\n\nexport default TeamSize;","import { connect } from 'react-redux';\nimport TeamSize from './TeamSize';\nimport { setTeamSize } from '../../data/actions/state';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleSubmit: (value) => dispatch(setTeamSize(value)),\n    };\n}\n\nexport default connect(\"\", mapDispatchToProps)(TeamSize);","import React from \"react\";\n\nconst MatchOptions = ({ teamsFilled, handleReset, handleShuffle }) => (\n    <section className=\"match-options-section\">\n        <button \n            className=\"btn-primary\"\n            onClick={ handleReset }\n        >\n            Start Over\n        </button>\n        { teamsFilled ?\n            <button \n                className=\"btn-primary\"\n                onClick={ handleShuffle }\n            >\n                Shuffle Teams\n            </button>\n            : null\n        }\n    </section>\n)\n\nexport default MatchOptions;","import { connect } from 'react-redux';\nimport MatchOptions from './MatchOptions';\nimport { resetMatch, shuffleTeams } from '../../data/actions/state';\n\n// calculate and pass in whether or not the teams have full rosters of players\nconst mapStateToProps = (state) => {\n    let teamSize = state.teamSize;\n    return {\n        teamsFilled: (state.teamA.playersFilled === teamSize && state.teamB.playersFilled === teamSize)\n    };\n}\n\n// dispatch the addPlayer action to assign the player to a team\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleReset: () => dispatch(resetMatch()),\n        handleShuffle: () => dispatch(shuffleTeams()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatchOptions);","import React from 'react';\n\n// Option 1: teams filled = true and editTeamName = true, then direct user to edit the team names\n// Option 2: teams filled = true and editTeamName = false, Game On!\n// Option 3: teams filled = false - teams are not filled - show nothing\nconst PitchBanner = ({ teamsFilled, editTeamName }) => (\n    (teamsFilled && editTeamName) ?\n        (\n            <h3 className=\"pitch-header\">\n                Players set, now name your teams!\n            </h3>\n        )\n        : (\n            (teamsFilled) ? \n                (\n                    <h3 className=\"pitch-header\">\n                        Teams Complete, Game On!\n                    </h3>\n                )\n            :\n            null\n        )\n)\n\nexport default PitchBanner;","import { connect } from 'react-redux';\nimport PitchBanner from './PitchBanner';\n\n// calculate and pass in whether or not the teams have full rosters of players\nconst mapStateToProps = ({ teamSize, editTeamName, teamA, teamB}) => {\n    return {\n        teamsFilled: (teamA.playersFilled === teamSize && teamB.playersFilled === teamSize),\n        editTeamName,\n    };\n}\n\nexport default connect(mapStateToProps)(PitchBanner);","import React from 'react';\n\n// Standard Components\nimport Header from '../components/Header/Header';\nimport Pitch from '../components/Pitch/Pitch';\nimport Footer from '../components/Footer/Footer';\n\n// React-Redux (state/dispatch passed from index.js)\nimport TeamInfo from '../components/TeamInfo';\nimport PlayerEntry from '../components/PlayerEntry';\nimport TeamSize from '../components/TeamSize';\nimport MatchOptions from '../components/MatchOptions';\nimport PitchBanner from '../components/PitchBanner';\n\n\nfunction App({ teamSize }) {\n  return (\n    <main className=\"main-app\">\n      <Header />\n      { teamSize === 0 ?\n        <TeamSize initial={ 5 } min={ 3 } max={ 11 } />\n        :\n        <>\n          <PitchBanner />\n          <PlayerEntry />\n          <TeamInfo />\n          <Pitch />\n          <MatchOptions />\n        </>\n      }\n      <Footer />\n    </main>\n  );\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\n\nconst mapStateToProps = ( { teamSize } ) => {\n    return {\n        teamSize\n    }\n}\n\nexport default connect(mapStateToProps)(App);","const initialState = {\n    teamSize: 0,\n    editTeamName: true,\n    teamA: {\n        name: \"Team A\",\n        playersFilled: 0,\n        players: [],\n    },\n    teamB: {\n        name: \"Team B\",\n        playersFilled: 0,\n        players: [],\n    }\n  };\n  \n  export default initialState;","import initialState from './initialState';\n\n// random integer function\nconst getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \n}\n\n\n// randomly add a player to a team\nconst addPlayer = (state, action) => {\n  // pick a random team\n  let team = getRandomInt(1, 2) === 1 ? \"teamA\" : \"teamB\";\n  // pick a random position \n  let i = getRandomInt(0, state.teamSize - 1);\n  // only add the player name to the position if it's not already filled\n  if (state[team].players[i].name !== \"\") {\n    // if already filled call this function again to try another random spot\n    return addPlayer(state, action);\n  } else {\n    // otherwise we've found an empty spot and we can save the players name into the position\n    return {\n      ...state,\n      [team]: {\n        ...state[team],\n        playersFilled: state[team].playersFilled + 1, // increment the number of players filled\n        players: state[team].players.map((player, index) => { // save the player name into the randomly selected position\n          return index === i ? {...player, name: action.name} : {...player};\n        })\n      }\n    }\n  }\n}\n\n// set the team size and create initial state of position (array of objects)\nconst setTeamSize = (state, action) => {\n  let players = [];\n  let position = \"\";\n  let size = action.teamSize;\n  let numDefenders = Math.floor((size - 1) / 2);\n\n  for (let i = 0; i < size; i += 1) {\n    if (i === 0) {\n      position = \"GK\"\n    } else if (i >= 1 && i <= numDefenders){\n      position = \"D\"\n    } else {\n      position = \"F\"\n    }\n\n    players[i] = { \n      name: \"\",\n      position, \n    };\n  }\n\n  return {\n    ...state,\n    teamSize: action.teamSize,\n    teamA: {\n      ...state.teamA,\n      players\n    },\n    teamB: {\n      ...state.teamB,\n      players\n    }\n  }\n} \n\n// Update Team names\nconst setTeamNames = (state, action) => {\n  return {\n    ...state,\n    teamA: {...state.teamA, name: action.teamA },\n    teamB: {...state.teamB, name: action.teamB },\n    editTeamName: false,\n  }\n}\n\n// flip editTeamName to true to allow editing of the team names\nconst editTeamNames = (state) => {\n  return {\n    ...state,\n    editTeamName: true,\n  }\n}\n\n// knuth shuffle function\nconst knuthShuffle = (array) => {\n  for (let i = array.length - 1; i > 0; i -= 1) {\n    let rand = Math.floor((i + 1) * Math.random()); //get random between zero and i (inclusive)\n    let temp = array[i];   //swap i and the random index\n    array[i] = array[rand];\n    array[rand] = temp;\n  }\n\n  return array;\n}\n\n\n// shuffle the teams randomly using knutf shuffle method\nconst shuffleTeams = (state) => {\n  // get teams into one array\n  let players = [...state.teamA.players.map((player) => (player.name)), ...state.teamB.players.map((player) => (player.name))];\n  players = knuthShuffle(players); // shuffle\n\n  let teamAplayers = players.slice(0,(players.length / 2));\n  let teamBplayers = players.slice((players.length / 2));\n\n  return {\n    ...state,\n    teamA: {\n      ...state.teamA,\n      players: state.teamA.players.map((player, i) => \n        ({...player, name: teamAplayers[i]})\n      ), // update the player names after they've been shuffled\n    },\n    teamB: {\n      ...state.teamB,\n      players: state.teamB.players.map((player, i) => \n        ({...player, name: teamBplayers[i]})\n      ), // update the player names after they've been shuffled\n    }\n  }\n}\n\n// Reducer function\nconst reducer = (state, action) => {\n    switch (action.type) {\n      case \"ADD_PLAYER\": return addPlayer(state, action); // add player randomly into a position\n      case \"SET_TEAM_SIZE\": return setTeamSize(state, action);\n      case \"SET_TEAM_NAMES\": return setTeamNames(state, action);\n      case \"EDIT_TEAM_NAMES\": return editTeamNames(state);\n      case \"SHUFFLE_TEAMS\": return shuffleTeams(state);\n      case \"RESET\": return {...initialState}; // back to initial state\n      default: return state;\n    }\n  }\n  \n  export default reducer;","import { createStore, compose } from 'redux';\n\nimport initialState from './initialState';\nimport reducer from './reducer';\n\n  // set up redux dev tools \n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  // store set up\n  const store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers()\n  );\n  \n  export default store;","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport ReactDOM from 'react-dom';\nimport App from './App/';\nimport store from './data/store';\n\n// CSS\nimport './css/style.css';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}